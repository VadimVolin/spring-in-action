<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:lang="http://www.springframework.org/schema/lang"

       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/lang
        http://www.springframework.org/schema/lang/spring-lang-3.0.xsd">

    <!--	<import resource="autoInj.xml"/>-->

    <bean id="poeticDuke" class="app.juggler.PoeticJuggler">
        <constructor-arg value="15"/>
        <constructor-arg value=" poetic juggler"/>
        <constructor-arg>
            <bean id="sonnet29" class="app.sonnet.Sonnet29"/>
        </constructor-arg>
    </bean>

    <bean id="duke" class="app.juggler.Juggler">
        <constructor-arg value="'duke'"/>
    </bean>

    <bean id="duke1" class="app.juggler.Juggler">
        <constructor-arg value="duke1"/>
    </bean>

    <bean id="duke2" class="app.juggler.Juggler">
        <constructor-arg value="duke2"/>
    </bean>


    <bean id="theStage" class="app.stage.Stage"
          factory-method="getInstance"/>


    <bean id="auditorium" class="app.auditorium.Auditorium"/>


    <bean id="saxophone" class="app.instrument.Saxophone"/>
    <bean id="piano" class="app.instrument.Piano" autowire-candidate="false"/>

    <bean id="guitar" class="app.instrument.Guitar" scope="prototype" autowire-candidate="false"/>
    <bean id="cymbal" class="app.instrument.Cymbal" autowire-candidate="false"/>
    <bean id="harmonica" class="app.instrument.Harmonica" autowire-candidate="false"/>

    <bean id="baseSaxophonist"
          class="app.instrumental.Instrumentalist" abstract="true">
        <property name="song" value="Jingle Bells"/>
        <property name="instrument" ref="saxophone"/>
    </bean>

    <!--	<bean id="kenny" parent="baseSaxophonist"/>-->
    <bean id="kenny" class="app.instrumental.Instrumentalist">
        <property name="name" value="kenny"/>
        <property name="song" value="Jingle Bells"/>
        <property name="instrument" ref="saxophone"/>
    </bean>

    <bean id="frank" parent="baseSaxophonist">
        <property name="song" value="Mary had a little lamb"/>
    </bean>

    <bean id="david" parent="baseSaxophonist"/>

    <bean id="hank" class="app.instrumental.OneManBand">
        <property name="instruments">
            <props>
                <prop key="GUITAR">Strum strum strum</prop>
                <prop key="CYMBAL">tlink tlink tlink</prop>
                <prop key="HARMONICA">pram pram pram</prop>
            </props>
        </property>
    </bean>

<!--    <bean id="carl" class="app.instrumental.Instrumentalist">-->
<!--        <property name="name" value="Carl"/>-->
<!--                <property name="song" value="#{kenny.song}"/>-->
<!--&lt;!&ndash;        <property name="song" value="BELELEFLSFSLGEW"/>&ndash;&gt;-->
<!--                <property name="instrument" value="#{kenny.instrument}"/>-->
<!--&lt;!&ndash;        <property name="instrument" ref="saxophone"/>&ndash;&gt;-->

<!--        &lt;!&ndash;                  value="#{('kenny.song' eq 'Jingle Belllls')?'saxophone':'piano'}"/>&ndash;&gt;-->
<!--    </bean>-->

    <bean id="stevie" class="app.instrumental.AbstractInstrumentalist">
        <lookup-method name="getInstrument" bean="guitar"/>
        <property name="song" value="GreenSleeves"/>
    </bean>

    <!-- injection non-spring components -->

    <bean id="pianist" class="app.instrumental.Instrumentalist"
          abstract="true">
        <property name="song" value="Chopsticks"/>
        <property name="instrument">
            <bean class="app.instrument.Piano"/>
        </property>
    </bean>

    <!-- Magician -->

    <bean id="harry" class="app.magic.Magician">
        <property name="magicBox" ref="magicBox"></property>
        <property name="magicWords" value="Bippity boppity boo"></property>
    </bean>

    <bean id="magicBox" class="app.magic.MagicBoxImpl">
        <replaced-method name="getContents"
                         replacer="tigerReplacer"></replaced-method>
    </bean>

    <bean id="tigerReplacer" class="app.magic.TigerReplacer"/>


    <!-- work with util: collection -->
    <util:list id="cities">
        <bean class="app.habuma.cities.City" p:name="Chicago"
              p:state="IL" p:population="2853114"/>
        <bean class="app.habuma.cities.City" p:name="Atlanta"
              p:state="GA" p:population="537958"/>
        <bean class="app.habuma.cities.City" p:name="Dallas" p:state="TX"
              p:population="1279910"/>
        <bean class="app.habuma.cities.City" p:name="Houston"
              p:state="TX" p:population="2242193"/>
        <bean class="app.habuma.cities.City" p:name="Odessa" p:state="TX"
              p:population="90943"/>
        <bean class="app.habuma.cities.City" p:name="El paso"
              p:state="TX" p:population="613190"/>
        <bean class="app.habuma.cities.City" p:name="Jal" p:state="NM"
              p:population="1996"/>
        <bean class="app.habuma.cities.City" p:name="Las Cruces"
              p:state="NM" p:population="91865"/>
    </util:list>

    <bean id="cityList" class="app.habuma.cities.CityList">
        <property name="lists"
                  value="#{cities.?[population gt 100000].![name + ', ' + state]}"/>
    </bean>

    <!--    create aop aspect with som action and create aop:config with ref on audience-->
    <bean id="audience" class="app.audience.Audience"/>

    <bean id = "magicianReader" class = "app.mindreader.MagicianReader"/>

    <bean id="volunteer" class="app.mindreader.Volonteer"/>

    <!--    if we should change pointcut, we must change every aop-action-->
    <!--    <aop:config>-->
    <!--        <aop:aspect ref="audience">-->
    <!--            <aop:before pointcut="execution(* app.performer.Performer.perform(..))" method="takeSeats"/>-->

    <!--            <aop:before pointcut="execution(* app.performer.Performer.perform(..))" method="turnOffCellPhones"/>-->

    <!--            <aop:after-returning pointcut="execution(* app.performer.Performer.perform(..))" method="applaud"/>-->

    <!--            <aop:after-throwing pointcut="execution(* app.performer.Performer.perform(..))" method="demandRefund"/>-->
    <!--        </aop:aspect>-->
    <!--    </aop:config>-->

    <!--   Now if we must change pointcut we can changed only one  aop:pointcut-->
    <aop:config>
        <aop:aspect ref="audience">
<!--            <aop:pointcut id="performance" expression="execution(* app.performer.Performer.perform(..))"/>-->
<!--            <aop:before pointcut-ref="performance" method="takeSeats"/>-->

<!--            <aop:before pointcut-ref="performance" method="turnOffCellPhones"/>-->

<!--            <aop:after-returning pointcut-ref="performance" method="applaud"/>-->

<!--            <aop:after-throwing pointcut-ref="performance" method="demandRefund"/>-->
        </aop:aspect>

        <aop:aspect ref = "audience">
            <aop:pointcut id = "performance2" expression="execution(* app.performer.Performer.perform(..))"/>
            <aop:around pointcut-ref="performance2" method="watchPerformance"/>
        </aop:aspect>

        <aop:aspect ref = "magicianReader">
            <aop:pointcut id="thinking"
                          expression="execution(* app.mindreader.Thinker.thinkOfSomething(String))
                           and args(thoughts)"/>

            <aop:before pointcut-ref="thinking" method="interceptThoughts" arg-names = "thoughts"/>
        </aop:aspect>
    </aop:config>

</beans>